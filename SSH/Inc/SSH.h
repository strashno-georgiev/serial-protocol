/*********************************************************************
*                     SEGGER Microcontroller GmbH                    *
*                        The Embedded Experts                        *
**********************************************************************
*                                                                    *
*       (c) 2003 - 2022  SEGGER Microcontroller GmbH                 *
*                                                                    *
*       www.segger.com     Support: support@segger.com               *
*                                                                    *
**********************************************************************
-------------------------- END-OF-HEADER -----------------------------

File        : SSH.h
Purpose     : emSSH User-Level API.

*/

#ifndef SSH_H
#define SSH_H

/*********************************************************************
*
*       #include Section
*
**********************************************************************
*/

#include "SSH_ConfDefaults.h"
#include "CRYPTO.h"

#ifdef __cplusplus
extern "C" {
#endif

/*********************************************************************
*
*       Defines, fixed
*
**********************************************************************
*/

/*********************************************************************
*
*       Version number
*
*  Description
*    Symbol expands to a number that identifies the specific emSSH release.
*/
#define SSH_VERSION               25400   // Format is "Mmmrr" so, for example, 24401 corresponds to version 2.44a.

/*********************************************************************
*
*       Logging flags
*
*  Description
*    Flags that control log output.
*
*  Additional information
*    Flags are added using SSH_AddLogFilter() and removed using
*    SSH_RemoveLogFilter().
*/
#define SSH_LOG_ERROR         (1uL     )  // Log all error status returns generated by emSSH.
#define SSH_LOG_TRANSPORT     (1uL << 1)  // Log incoming and outgoing SSH packets.
#define SSH_LOG_SUITE         (1uL << 2)  // Log agreed connection settings.
#define SSH_LOG_KEYS          (1uL << 3)  // Log keys and operations related to keys.
#define SSH_LOG_MESSAGE       (1uL << 4)  // Log decoded SSH messages.
#define SSH_LOG_CONFIG        (1uL << 5)  // Log emSSH configuration on startup.
#define SSH_LOG_SCP           (1uL << 6)  // Log secure copy (SCP) operations.
#define SSH_LOG_APP           (1uL << 31) // Log application messages.

/*********************************************************************
*
*       Warning flags
*
*  Description
*    Flags that control warning output.
*
*  Additional information
*    Flags are added using SSH_AddWarnFilter() and removed using
*    SSH_RemoveWarnFilter().
*/
#define SSH_WARN_CONFIG       (1uL     )  // Warn on configuration issues on startup.
#define SSH_WARN_PROTOCOL     (1uL << 1)  // Warn on protocol-related issues.
#define SSH_WARN_SCP          (1uL << 2)  // Warn on secure copy (SCP) issues.

/*********************************************************************
*
*       SSH-component errors
*/
#define SSH_ERROR_ASSERT_FAILED       (-500)
#define SSH_ERROR_BAD_MAC             (-501)
#define SSH_ERROR_OUT_OF_MEMORY       (-502)
#define SSH_ERROR_BAD_PROTOCOL        (-503)
#define SSH_ERROR_SCP_BAD_PROTOCOL    (-504)
#define SSH_ERROR_USERAUTH_FAIL       (-505)
#define SSH_ERROR_INTERNAL_ERROR      (-506)
#define SSH_ERROR_UNSUPPORTED_COMMAND (-507)
#define SSH_ERROR_SESSION_TERMINATED  (-508)
#define SSH_ERROR_KEY_EXCHANGE_FAIL   (-509)
#define SSH_ERROR_BAD_CONFIGURATION   (-510)
#define SSH_ERROR_PATH_TOO_LONG       (-511)
#define SSH_ERROR_CANT_READ_FILE      (-512)
#define SSH_ERROR_CANT_WRITE_FILE     (-513)
#define SSH_ERROR_CANT_CREATE_FILE    (-514)
#define SSH_ERROR_CANT_READ_FOLDER    (-515)
#define SSH_ERROR_CANT_CREATE_FOLDER  (-516)
#define SSH_ERROR_NO_MORE_FILES       (-517)
#define SSH_ERROR_NOT_ACTIVE          (-518)

/*********************************************************************
*
*       IANA SSH disconnection reasons
*/
#define SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT             1
#define SSH_DISCONNECT_PROTOCOL_ERROR                          2
#define SSH_DISCONNECT_KEY_EXCHANGE_FAILED                     3
#define SSH_DISCONNECT_RESERVED                                4
#define SSH_DISCONNECT_MAC_ERROR                               5
#define SSH_DISCONNECT_COMPRESSION_ERROR                       6
#define SSH_DISCONNECT_SERVICE_NOT_AVAILABLE                   7
#define SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED          8
#define SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE                 9
#define SSH_DISCONNECT_CONNECTION_LOST                        10
#define SSH_DISCONNECT_BY_APPLICATION                         11
#define SSH_DISCONNECT_TOO_MANY_CONNECTIONS                   12
#define SSH_DISCONNECT_AUTH_CANCELLED_BY_USER                 13
#define SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE         14
#define SSH_DISCONNECT_ILLEGAL_USER_NAME                      15

/*********************************************************************
*
*       Public types
*
**********************************************************************
*/

/*********************************************************************
*
*       Opaque types
*/
typedef struct SSH_SESSION_tag                SSH_SESSION;
typedef struct SSH_KEY_EXCHANGE_ALGORITHM_tag SSH_KEY_EXCHANGE_ALGORITHM;
typedef struct SSH_MAC_ALGORITHM_tag          SSH_MAC_ALGORITHM;
typedef struct SSH_PUBLIC_KEY_ALGORITHM_tag   SSH_PUBLIC_KEY_ALGORITHM;
typedef struct SSH_ENCRYPTION_ALGORITHM_tag   SSH_ENCRYPTION_ALGORITHM;
typedef struct SSH_COMPRESSION_ALGORITHM_tag  SSH_COMPRESSION_ALGORITHM;
typedef struct SSH_USERAUTH_METHOD_tag        SSH_USERAUTH_METHOD;
typedef struct SSH_CHANNEL_REQUEST_tag        SSH_CHANNEL_REQUEST;
typedef struct SSH_SERVICE_tag                SSH_SERVICE;

/*********************************************************************
*
*       Socket / Transport API
*/
typedef struct {
  int (*pfSend)    (int Socket, const char *pData, int Len, int Flags);
  int (*pfReceive) (int Socket, char *pData, int Len, int Flags);
  int (*pfClose)   (int Socket);
} SSH_TRANSPORT_API;

/*********************************************************************
*
*       Server host key API
*/
typedef struct {
  const CRYPTO_RSA_PUBLIC_KEY    * (*pfGetRSAPublicKey)   (const char *sName);
  const CRYPTO_RSA_PRIVATE_KEY   * (*pfGetRSAPrivateKey)  (const char *sName);
  const CRYPTO_ECDSA_PUBLIC_KEY  * (*pfGetECDSAPublicKey) (const char *sName);
  const CRYPTO_ECDSA_PRIVATE_KEY * (*pfGetECDSAPrivateKey)(const char *sName);
  const CRYPTO_EdDSA_PUBLIC_KEY  * (*pfGetEdDSAPublicKey) (const char *sName);
  const CRYPTO_EdDSA_PRIVATE_KEY * (*pfGetEdDSAPrivateKey)(const char *sName);
  void                             (*pfGetDSAPublicKey)   (const char *sName, const CRYPTO_DSA_PUBLIC_KEY  **ppPublicKey,  const CRYPTO_DSA_DOMAIN_PARAMS **ppDomainParas);
  void                             (*pfGetDSAPrivateKey)  (const char *sName, const CRYPTO_DSA_PRIVATE_KEY **ppPrivateKey, const CRYPTO_DSA_DOMAIN_PARAMS **ppDomainParas);
} SSH_HOSTKEY_API;

/*********************************************************************
*
*       Channel API
*/
typedef struct {
  int  (*pfOnChannelData)         (SSH_SESSION *pSelf, unsigned Channel, const U8 *pData, unsigned DataLen);
  int  (*pfOnChannelWindowAdjust) (SSH_SESSION *pSelf, unsigned Channel);
  int  (*pfOnChannelEOF)          (SSH_SESSION *pSelf, unsigned Channel);
  void (*pfOnChannelClose)        (SSH_SESSION *pSelf, unsigned Channel);
} SSH_CHANNEL_API;

/*********************************************************************
*
*       Terminal request parameters
*
*  Description
*    Broken-down parameters from pseudo-terminal request.
*
*  See also
*    SSH_PTYREQ_ParseParas()
*/
typedef struct {
  U32        TerminalWidth;          // Terminal width in characters.
  U32        TerminalHeight;         // Terminal height in rows.
  U32        TerminalPixelWidth;     // Terminal width in pixels.
  U32        TerminalPixelHeight;    // Terminal height in pixels.
  void     * pTerminalName;          // Pointer to terminal name string.
  unsigned   TerminalNameLen;        // Octet length of terminal name string.
  void     * pTerminalModes;         // Terminal modes string.
  unsigned   TerminalModesLen;       // Octet length of terminal modes string.
} SSH_PTYREQ_PARAS;

/*********************************************************************
*
*       Window dimension change parameters
*
*  Description
*    Broken-down parameters from window change request.
*
*  See also
*    SSH_WINDOW_CHANGE_ParseParas()
*/
typedef struct {
  U32 TerminalWidth;          // Terminal width in characters.
  U32 TerminalHeight;         // Terminal height in rows.
  U32 TerminalPixelWidth;     // Terminal width in pixels.
  U32 TerminalPixelHeight;    // Terminal height in pixels.
} SSH_WINDOW_CHANGE_PARAS;

/*********************************************************************
*
*       User authentication parameters
*
*  Description
*    Broken-down parameters from user authentication request.
*
*  See also
*    SSH_USERAUTH_NONE_ParseParas() and SSH_USERAUTH_PASSWORD_ParseParas()
*   
*/
typedef struct {
  void       * pUserName;        // Pointer to user name string.
  unsigned     UserNameLen;      // Octet length of the user name string.
  void       * pServiceName;     // Pointer to service name string.
  unsigned     ServiceNameLen;   // Octet length of the service name string.
  void       * pMethodName;      // Pointer to the method name string.
  unsigned     MethodNameLen;    // Octet length of the method name string.
  //
  CRYPTO_TLV * pTLV;
} SSH_USERAUTH_REQUEST_PARAS;

/*********************************************************************
*
*       Password user-authentication parameters
*
*  Description
*    Broken-down parameters for password user-authentication request.
*
*  See also
*    SSH_USERAUTH_PASSWORD_ParseParas()
*/
typedef struct {
  void     * pPassword;     // Pointer to password string.
  unsigned   PasswordLen;   // Octet length of the password string.
} SSH_USERAUTH_PASSWORD_PARAS;

/*********************************************************************
*
*       "None" user-authentication parameters
*
*  Description
*    Broken-down parameters for "none" user-authentication request.
*
*  See also
*    SSH_USERAUTH_NONE_ParseParas()
*/
typedef struct {
  unsigned _Unused;
} SSH_USERAUTH_NONE_PARAS;

/*********************************************************************
*
*       Channel request parameters
*
*  Description
*    Broken-down parameters for channel request.
*/
typedef struct {
  SSH_CHANNEL_REQUEST * pRequest;  // Pointer to channel request
  int                   WantReply; // Boolean, whether the request requires a channel status reply
  U8                  * pData;     // Pointer to channel request parameter string
  unsigned              DataLen;   // Octet length of the channel request parameter string
} SSH_CHANNEL_REQUEST_PARAS;

/*********************************************************************
*
*       SSH-related Callbacks
*/
typedef int SSH_USERAUTH_REQUEST_FUNC(SSH_SESSION *pSession, SSH_USERAUTH_REQUEST_PARAS *pParas);
typedef int SSH_CHANNEL_REQUEST_FUNC (SSH_SESSION *pSession, unsigned Channel, SSH_CHANNEL_REQUEST_PARAS *pParas);
typedef int SSH_SERVICE_REQUEST_FUNC (SSH_SESSION *pSession, const char *sServiceName);


/*********************************************************************
*
*       Channel service callback
*
*  Description
*    Channel service callback.
*
*  Additional information
*    A user-provided callback function conforming to this prototype
*    is called by SSH_SESSION_IterateChannels() when iterating
*    over the channels.
*
*  See also
*    SSH_SESSION_IterateChannels()
*/
typedef int SSH_CHANNEL_SERVICE_FUNC(SSH_SESSION *pSession, unsigned Channel);

/*********************************************************************
*
*       Opaque types
*/
typedef struct SSH_SCP_SINK_CONTEXT_tag   SSH_SCP_SINK_CONTEXT;
typedef struct SSH_SCP_SOURCE_CONTEXT_tag SSH_SCP_SOURCE_CONTEXT;

/*********************************************************************
*
*       SSH_SCP_SINK_FS_CONFIG
*
*  Description
*    Configure SCP sink.
*
*  Parameters
*    sRoot - Zero-terminated string defining SCP file system
*            virtual root.
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*
*  Additional information
*    This function is called before any other and is passed
*    the host folder that is the root of the file system exposed
*    using secure copy functions.
*/
typedef int SSH_SCP_SINK_FS_CONFIG(const char *sRoot);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_INIT
*
*  Description
*    Initialize SCP sink instance.
*
*  Parameters
*    Index   - Zero-based index of SCP file system transfer instance to
*              initialize, range [0...SSH_SCP_CONFIG_MAX_SESSIONS-1].
*    pPath   - Pointer to root-relative path string for this transfer.
*    PathLen - Octet length of root-relative path string for this transfer.
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*
*  Additional information
*    This function is called to initialize a file system transfer
*    instance.  It is called before any other transfer takes place.
*/
typedef int SSH_SCP_SINK_FS_INIT(unsigned Index, const char *pPath, unsigned PathLen);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_CREATE_FILE
*
*  Description
*    Create file.
*
*  Parameters
*    Index   - Zero-based index of SCP file system transfer instance to
*              initialize, range [0...SSH_SCP_CONFIG_MAX_SESSIONS-1].
*    Mode    - Standard Unix file mode.
*    Len     - Length of file.  This can be used to preallocate the
*              file to increase performance.
*    ModTime - Last modification time, Unix format, number of seconds
*              since 1 Jan 1970.  Zero indicates time is not set.
*    AccTime - Last access time, Unix format, number of seconds since
*              1 Jan 1970.  Zero indicates time is not set.
*    sName   - Zero-terminated file name (not path name) of the file
*              to create.
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*
*  Additional information
*    The controlling SCP sink software will create a file, write to it,
*    and finally close it.  There will never be a case where two files
*    are open using the same index.
*/
typedef int SSH_SCP_SINK_FS_CREATE_FILE(unsigned Index, unsigned Mode, U32 Len, U32 ModTime, U32 AccTime, const char *sName);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_WRITE_FILE
*
*  Description
*    Write data to file.
*
*  Parameters
*    Index   - Zero-based index of SCP file system transfer instance to
*              initialize, range [0...SSH_SCP_CONFIG_MAX_SESSIONS-1].
*    pData   - Pointer to object to write.
*    DataLen - Length of the object to write.
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*/
typedef int SSH_SCP_SINK_FS_WRITE_FILE(unsigned Index, const U8 *pData, unsigned DataLen);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_WRITE_FILE
*
*  Description
*    Close file.
*
*  Parameters
*    Index   - Zero-based index of SCP file system transfer instance to
*              initialize, range [0...SSH_SCP_CONFIG_MAX_SESSIONS-1].
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*/
typedef int SSH_SCP_SINK_FS_CLOSE_FILE(unsigned Index);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_ENTER_FOLDER
*
*  Description
*    Enter folder.
*
*  Parameters
*    Index   - Zero-based index of SCP file system transfer instance to
*              initialize, range [0...SSH_SCP_CONFIG_MAX_SESSIONS-1].
*    Mode    - Standard Unix file mode.
*    ModTime - Last modification time, Unix format, number of seconds
*              since 1 Jan 1970.  Zero indicates time is not set.
*    AccTime - Last access time, Unix format, number of seconds since
*              1 Jan 1970.  Zero indicates time is not set.
*    sName   - Zero-terminated folder name (not path name) of the folder
*              to create.
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*
*  Additional information
*    The controlling SCP sink software will call Enter Folder to
*    create a folder; all subsequent Create File requests require
*    that files are created in this folder.  When folder copy is
*    complete, Exit Folder will return to the parent folder.
*
*    The implementation of this method should create a folder with
*    the given mode if the folder does not exist.
*/
typedef int SSH_SCP_SINK_FS_ENTER_FOLDER(unsigned Index, unsigned Mode, U32 ModTime, U32 AccTime, const char *sName);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_EXIT_FOLDER
*
*  Description
*    Exit folder.
*
*  Parameters
*    Index - Zero-based index of SCP file system transfer instance to
*            initialize, range [0...SSH_SCP_CONFIG_MAX_SESSIONS-1].
*
*  Return value
*    >= 0 - Success.
*    <  0 - Error status.
*
*  Additional information
*    The implementation of this method should return to the parent
*    folder of the current folder.
*/
typedef int SSH_SCP_SINK_FS_EXIT_FOLDER(unsigned Index);

/*********************************************************************
*
*       SSH_SCP_SINK_FS_DECODE_STATUS
*
*  Description
*    Decode error status.
*
*  Parameters
*    Status - Status to decode.
*
*  Return value
*    == NULL - When status is "OK, no error".
*    != NULL - Zero-terminated string describing the error.
*/
typedef const char * SSH_SCP_SINK_FS_DECODE_STATUS(int Status);

/*********************************************************************
*
*       SSH-SCP sink interface to file system
*/
typedef struct {
  SSH_SCP_SINK_FS_CONFIG        *pfConfig;       // Configure sink
  SSH_SCP_SINK_FS_INIT          *pfInit;         // Initialize sink transfer instance
  SSH_SCP_SINK_FS_CREATE_FILE   *pfCreateFile;   // Create file
  SSH_SCP_SINK_FS_WRITE_FILE    *pfWriteFile;    // Write data to file
  SSH_SCP_SINK_FS_CLOSE_FILE    *pfCloseFile;    // Close file
  SSH_SCP_SINK_FS_ENTER_FOLDER  *pfEnterFolder;  // Enter folder
  SSH_SCP_SINK_FS_EXIT_FOLDER   *pfExitFolder;   // Exit folder
  SSH_SCP_SINK_FS_DECODE_STATUS *pfDecodeStatus; // Decode error status
} SSH_SCP_SINK_FS_API;

/*********************************************************************
*
*       File information for source mode.
*/
typedef struct {
  U32          Length;                               // Size, in bytes, of file.
  int          IsFolder;                             // Nonzero indicates this is a file.
  unsigned     Mode;                                 // Posix file mode.
  char         aPathName[SSH_SCP_CONFIG_PATH_MAX];   // Complete path name.
} SSH_SCP_SOURCE_FILE_INFO;

/*********************************************************************
*
*       SSH-SCP source interface to file system
*/
typedef struct {
  int          (*pfConfig)       (const char *sRoot);
  int          (*pfInit)         (unsigned Index, const char *sPath);
  int          (*pfFindFirst)    (unsigned Index, SSH_SCP_SOURCE_FILE_INFO *pInfo);
  int          (*pfFindNext)     (unsigned Index, SSH_SCP_SOURCE_FILE_INFO *pInfo);
  int          (*pfFindClose)    (unsigned Index);
  int          (*pfOpenFile)     (unsigned Index, char *sName);
  int          (*pfReadFile)     (unsigned Index, U8 *pData, unsigned DataLen);
  int          (*pfCloseFile)    (unsigned Index);
  const char * (*pfDecodeStatus) (int Status);
} SSH_SCP_SOURCE_FS_API;

/*********************************************************************
*
*       Public data
*
**********************************************************************
*/

/*********************************************************************
*
*       Key Exchange algorithms
*
*  Official IANA names for key exchange algorithms
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16
*/
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_RSA1024_SHA1;                        // [RFC4432]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_RSA2048_SHA256;                      // [RFC4432]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP1_SHA1;                      // [RFC4253] Section 8.1
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP14_SHA1;                     // [RFC4253] Section 8.2
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP14_SHA256;                   // [RFC8268]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP15_SHA512;                   // [RFC8268]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP16_SHA512;                   // [RFC8268]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP17_SHA512;                   // [RFC8268]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP18_SHA512;                   // [RFC8268]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP_EXCHANGE_SHA1;              // [RFC4419] Section 4.1
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_DH_GROUP_EXCHANGE_SHA256;            // [RFC4419] Section 4.2
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_ECDH_SHA2_NISTP256;                  // [RFC5656]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_ECDH_SHA2_NISTP384;                  // [RFC5656]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_ECDH_SHA2_NISTP521;                  // [RFC5656]
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_CURVE25519_SHA256;                   // curve25519-sha256 - https://tools.ietf.org/html/draft-ietf-curdle-ssh-curves-08
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_CURVE448_SHA512;                     // curve448-sha512   - https://tools.ietf.org/html/draft-ietf-curdle-ssh-curves-08
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP14_SHA224;        // diffie-hellman-group14-sha224@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP14_SHA256;        // diffie-hellman-group14-sha256@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP15_SHA256;        // diffie-hellman-group15-sha256@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP15_SHA384;        // diffie-hellman-group15-sha384@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP16_SHA384;        // diffie-hellman-group16-sha384@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP16_SHA512;        // diffie-hellman-group16-sha512@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP18_SHA512;        // diffie-hellman-group18-sha512@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP_EXCHANGE_SHA224; // diffie-hellman-group-exchange-sha224@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP_EXCHANGE_SHA384; // diffie-hellman-group-exchange-sha384@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_SCS_DH_GROUP_EXCHANGE_SHA512; // diffie-hellman-group-exchange-sha512@ssh.com
extern SSH_KEY_EXCHANGE_ALGORITHM SSH_KEY_EXCHANGE_VENDOR_LIBSSH_CURVE25519_SHA256;     // curve25519-sha256 - https://tools.ietf.org/html/draft-ietf-curdle-ssh-curves-08

/*********************************************************************
*
*       Standard MAC algorithms
*
*  Official IANA names for key exchange algorithms
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18
*/
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_HMAC_MD5;                           // [RFC4253] Section 6.4  OPTIONAL
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_HMAC_MD5_96;                        // [RFC4253] Section 6.4  OPTIONAL
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_HMAC_SHA1;                          // [RFC4253] Section 6.4  REQUIRED
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_HMAC_SHA1_96;                       // [RFC4253] Section 6.4  RECOMMENDED
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_HMAC_SHA2_256;                      // [RFC6668] Section 2    RECOMMENDED
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_HMAC_SHA2_512;                      // [RFC6668] Section 2    OPTIONAL
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_RIPEMD160;      // hmac-ripemd160@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_MD5_ETM;        // hmac-md5-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_MD5_96_ETM;     // hmac-md5-96-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_SHA1_ETM;       // hmac-sha1-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_SHA1_96_ETM;    // hmac-sha1-96-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_SHA2_256_ETM;   // hmac-sha256-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_SHA2_512_ETM;   // hmac-sha512-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_OPENSSH_HMAC_RIPEMD160_ETM;  // hmac-ripemd160-etm@openssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_SCS_HMAC_SHA224;             // hmac-sha224@ssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_SCS_HMAC_SHA256;             // hmac-sha256-2@ssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_SCS_HMAC_SHA384;             // hmac-sha384@ssh.com
extern SSH_MAC_ALGORITHM SSH_MAC_ALGORITHM_VENDOR_SCS_HMAC_SHA512;             // hmac-sha512@ssh.com

/*********************************************************************
*
*       Public Key algorithms
*
*  Official IANA names for public key algorithms
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-19
*/
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_SSH_DSS;                     // [RFC4253] Section 6.6
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_SSH_RSA;                     // [RFC4253] Section 6.6
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_ECDSA_SHA2_NISTP256;         // [RFC5656]
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_ECDSA_SHA2_NISTP384;         // [RFC5656]
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_ECDSA_SHA2_NISTP521;         // [RFC5656]
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_SSH_ED25519;
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_RSA_SHA2_256;                // https://tools.ietf.org/html/draft-ietf-curdle-rsa-sha2-09
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_RSA_SHA2_512;                // https://tools.ietf.org/html/draft-ietf-curdle-rsa-sha2-09
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_VENDOR_SCS_SSH_DSS_SHA256;
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_VENDOR_SCS_SSH_RSA_SHA224;
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_VENDOR_SCS_SSH_RSA_SHA256;
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_VENDOR_SCS_SSH_RSA_SHA384;
extern SSH_PUBLIC_KEY_ALGORITHM SSH_PK_ALGORITHM_VENDOR_SCS_SSH_RSA_SHA512;

/*********************************************************************
*
*       Encryption algorithms
*
*  Official IANA names for encryption algorithms
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-17
*/
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_RC4;                              // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_RC4_128;                          // [RFC4345]
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_RC4_256;                          // [RFC4345]
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_3DES_CBC;                         // [RFC4253] Section 6.3           REQUIRED
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_3DES_CTR;                         // [RFC4344] Section 4             RECOMMENDED
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_AES128_CBC;                       // [RFC4253] Section 6.3           RECOMMENDED
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_AES192_CBC;                       // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_AES256_CBC;                       // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_AES128_CTR;                       // [RFC4344] Section 4             RECOMMENDED
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_AES192_CTR;                       // [RFC4344] Section 4             RECOMMENDED
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_AES256_CTR;                       // [RFC4344] Section 4             RECOMMENDED
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAMELLIA128_CBC;                  // [draft-kanno-secsh-camellia-00] OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAMELLIA192_CBC;                  // [draft-kanno-secsh-camellia-00] OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAMELLIA256_CBC;                  // [draft-kanno-secsh-camellia-00] OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAMELLIA128_CTR;                  // [draft-kanno-secsh-camellia-00] OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAMELLIA192_CTR;                  // [draft-kanno-secsh-camellia-00] OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAMELLIA256_CTR;                  // [draft-kanno-secsh-camellia-00] OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_BLOWFISH_CBC;                     // [RFC4253] Section 6.3           OPTIONAL (128-bit key)
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_BLOWFISH_CTR;                     // [RFC4344] Section 4             OPTIONAL (256-bit key)
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH128_CBC;                   // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH192_CBC;                   // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH256_CBC;                   // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH128_CTR;                   // [RFC4344] Section 4             OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH192_CTR;                   // [RFC4344] Section 4             OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH256_CTR;                   // [RFC4344] Section 4             OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_TWOFISH_CBC;                      // [RFC4253] Section 6.3           OPTIONAL (aka twofish256-cbc)
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAST128_CBC;                      // [RFC4253] Section 6.3           OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_CAST128_CTR;                      // [RFC4344] Section 4             OPTIONAL
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_VENDOR_OPENSSH_AES128_GCM;        // aes128-gcm@openssh.com
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_VENDOR_OPENSSH_AES256_GCM;        // aes256-gcm@openssh.com
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_VENDOR_OPENSSH_CHACHA20_POLY1305; // chacha20-poly1305@openssh.com
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_VENDOR_SCS_SEED_CBC;              // seed-cbc@ssh.com
extern SSH_ENCRYPTION_ALGORITHM SSH_ENCRYPTION_ALGORITHM_VENDOR_LIU_RIJNDAEL_CBC;          // rijndael-cbc@lysator.liu.se (aes256-cbc)

/*********************************************************************
*
*       Service requests
*
*  Official IANA names for services
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-9
*/
extern SSH_SERVICE SSH_SERVICE_USERAUTH;                                   // [RFC4252]
extern SSH_SERVICE SSH_SERVICE_CONNECTION;                                 // [RFC4254]

/*********************************************************************
*
*       Channel requests
*
*  Official IANA names for protocol-global and connection protocol channel requests
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-12
*       http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-13
*/
extern SSH_CHANNEL_REQUEST SSH_CHANNEL_REQUEST_PTYREQ;
extern SSH_CHANNEL_REQUEST SSH_CHANNEL_REQUEST_ENV;
extern SSH_CHANNEL_REQUEST SSH_CHANNEL_REQUEST_SHELL;
extern SSH_CHANNEL_REQUEST SSH_CHANNEL_REQUEST_EXEC;
extern SSH_CHANNEL_REQUEST SSH_CHANNEL_REQUEST_BREAK;
extern SSH_CHANNEL_REQUEST SSH_CHANNEL_REQUEST_WINDOW_CHANGE;

/*********************************************************************
*
*       Compression algorithms
*
*  Official IANA names for compression algorithms
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20
*/
extern SSH_COMPRESSION_ALGORITHM SSH_COMPRESSION_ALGORITHM_NONE;         // [RFC4253] Section 6.2

/*********************************************************************
*
*       User authentication methods
*
*  Official IANA names for authentication methods
*  See: http://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-10
*/
extern SSH_USERAUTH_METHOD SSH_USERAUTH_METHOD_NONE;                     // [RFC4252 http://tools.ietf.org/html/rfc4252#section-5.2] section 5.2
extern SSH_USERAUTH_METHOD SSH_USERAUTH_METHOD_PASSWORD;                 // [RFC4252 http://tools.ietf.org/html/rfc4252#section-8] section 8

/*********************************************************************
*
*       Secure copy file system APIs
*
**********************************************************************
*/

extern const SSH_SCP_SINK_FS_API   SSH_SCP_SINK_FS_Null;    // Null writable file system
extern const SSH_SCP_SINK_FS_API   SSH_SCP_SINK_FS_FS;      // emFile writable file system
extern const SSH_SCP_SINK_FS_API   SSH_SCP_SINK_FS_Win32;   // Win32 writable file system
extern const SSH_SCP_SOURCE_FS_API SSH_SCP_SOURCE_FS_FS;    // emFile readable file system
extern const SSH_SCP_SOURCE_FS_API SSH_SCP_SOURCE_FS_Win32; // Win32 readable file system

/*********************************************************************
*
*       Public functions
*
**********************************************************************
*/

/*********************************************************************
*
*       SSH management functions
*/
void     SSH_Init                                 (void);
void     SSH_Exit                                 (void);
void     SSH_SetHostKeyAPI                        (const SSH_HOSTKEY_API *pAPI);

/*********************************************************************
*
*       SSH configuration functions
*/
void     SSH_X_Config                             (void);     // Provided by user
void     SSH_KEY_EXCHANGE_ALGORITHM_Add           (SSH_KEY_EXCHANGE_ALGORITHM *pAPI);
void     SSH_PUBLIC_KEY_ALGORITHM_Add             (SSH_PUBLIC_KEY_ALGORITHM   *pAPI);
void     SSH_ENCRYPTION_ALGORITHM_Add             (SSH_ENCRYPTION_ALGORITHM   *pAPI);
void     SSH_MAC_ALGORITHM_Add                    (SSH_MAC_ALGORITHM          *pAPI);
void     SSH_COMPRESSION_ALGORITHM_Add            (SSH_COMPRESSION_ALGORITHM  *pAPI);
void     SSH_USERAUTH_METHOD_Add                  (SSH_USERAUTH_METHOD        *pAPI, SSH_USERAUTH_REQUEST_FUNC *pfCallback);
void     SSH_CHANNEL_REQUEST_Add                  (SSH_CHANNEL_REQUEST        *pAPI, SSH_CHANNEL_REQUEST_FUNC  *pfCallback);
void     SSH_SERVICE_Add                          (SSH_SERVICE                *pAPI, SSH_SERVICE_REQUEST_FUNC  *pfCallback);

/*********************************************************************
*
*       Sessions
*/
void     SSH_SESSION_Alloc                        (SSH_SESSION **ppSelf);
void     SSH_SESSION_Init                         (SSH_SESSION *pSelf, int Socket, const SSH_TRANSPORT_API *pTransportAPI);
void     SSH_SESSION_ConfBuffers                  (SSH_SESSION *pSelf, void *pRxBuffer, unsigned RxBufferLen, void *pTxBuffer, unsigned TxBufferLen);
void     SSH_SESSION_Disconnect                   (SSH_SESSION *pSelf, unsigned ReasonCode);
void     SSH_SESSION_DisconnectEx                 (SSH_SESSION *pSelf, unsigned ReasonCode, const char *sDescription, const char *sLanguageCode);
int      SSH_SESSION_SendUserauthBanner           (SSH_SESSION *pSelf, const char *sMessage, const char *sLanguageTag);
int      SSH_SESSION_SendServiceAccept            (SSH_SESSION *pSelf, const char *sString);
int      SSH_SESSION_Process                      (SSH_SESSION *pSelf);
unsigned SSH_SESSION_QueryIndex                   (SSH_SESSION *pSelf);
int      SSH_SESSION_QuerySocket                  (SSH_SESSION *pSelf);
int      SSH_SESSION_IterateChannels              (SSH_SESSION *pSelf, SSH_CHANNEL_SERVICE_FUNC *pfCallback);

/*********************************************************************
*
*       Terminal request
*/
int      SSH_PTYREQ_ParseParas                    (SSH_CHANNEL_REQUEST_PARAS *pReqParas, SSH_PTYREQ_PARAS *pPtyParas);

/*********************************************************************
*
*       Window dimension change 
*/
int      SSH_WINDOW_CHANGE_ParseParas             (SSH_CHANNEL_REQUEST_PARAS *pReqParas, SSH_WINDOW_CHANGE_PARAS *pWinChangeParas);

/*********************************************************************
*
*       User authentication method support
*/
int      SSH_USERAUTH_NONE_ParseParas             (SSH_USERAUTH_REQUEST_PARAS *pReqParas, SSH_USERAUTH_NONE_PARAS     *pMethodParas);
int      SSH_USERAUTH_PASSWORD_ParseParas         (SSH_USERAUTH_REQUEST_PARAS *pReqParas, SSH_USERAUTH_PASSWORD_PARAS *pMethodParas);

/*********************************************************************
*
*       Channels
*/
int      SSH_CHANNEL_Config                       (SSH_SESSION *pSelf, unsigned Channel, unsigned BufferSize, const SSH_CHANNEL_API *pAPI, void *pUserContext);
void     SSH_CHANNEL_Close                        (SSH_SESSION *pSelf, unsigned Channel);
int      SSH_CHANNEL_SendData                     (SSH_SESSION *pSelf, unsigned Channel, const void *pData, unsigned Len);
int      SSH_CHANNEL_SendStr                      (SSH_SESSION *pSelf, unsigned Channel, const char *sText);
int      SSH_CHANNEL_SendEOF                      (SSH_SESSION *pSelf, unsigned Channel);
int      SSH_CHANNEL_SendSuccess                  (SSH_SESSION *pSelf, unsigned Channel);
int      SSH_CHANNEL_SendFailure                  (SSH_SESSION *pSelf, unsigned Channel);
int      SSH_CHANNEL_SendCompletion               (SSH_SESSION *pSelf, unsigned Channel, int Status);
int      SSH_CHANNEL_SendRequestExitStatus        (SSH_SESSION *pSelf, unsigned Channel, U32 ExitStatus);
unsigned SSH_CHANNEL_QueryCanWrite                (SSH_SESSION *pSelf, unsigned Channel);
void *   SSH_CHANNEL_QueryUserContext             (SSH_SESSION *pSelf, unsigned Channel);
int      SSH_CHANNEL_IsValid                      (SSH_SESSION *pSelf, unsigned Channel);

/*********************************************************************
*
*       Secure copy
*
**********************************************************************
*/

/*********************************************************************
*
*       Secure copy (sink) functions
*/
int      SSH_SCP_SINK_Accept                      (SSH_SESSION *pSession, unsigned Channel, SSH_CHANNEL_REQUEST_PARAS *pParas);
int      SSH_SCP_SINK_Init                        (const SSH_SCP_SINK_FS_API *pAPI, const char *sRoot);
int      SSH_SCP_SINK_Start                       (SSH_SESSION *pSelf, unsigned Index);

/*********************************************************************
*
*       Secure copy (source) functions
*/
int      SSH_SCP_SOURCE_Accept                    (SSH_SESSION *pSession, unsigned Channel, SSH_CHANNEL_REQUEST_PARAS *pParas);
int      SSH_SCP_SOURCE_Init                      (const SSH_SCP_SOURCE_FS_API *pAPI, const char *sRoot);
int      SSH_SCP_SOURCE_Start                     (SSH_SESSION *pSelf, unsigned Index);

/*********************************************************************
*
*       Warning filter functions
*/
U32      SSH_SetWarnFilter                        (U32 FilterMask);
U32      SSH_AddWarnFilter                        (U32 FilterMask);
U32      SSH_RemoveWarnFilter                     (U32 FilterMask);

/*********************************************************************
*
*       Logging filter functions
*/
U32      SSH_SetLogFilter                         (U32 FilterMask);
U32      SSH_AddLogFilter                         (U32 FilterMask);
U32      SSH_RemoveLogFilter                      (U32 FilterMask);

/*********************************************************************
*
*       Mid-level log and warning functions
*/
void     SSH_Logf                                 (U32 ReportMask, const char *sFormat, ...);
void     SSH_Warnf                                (U32 ReportMask, const char *sFormat, ...);

/*********************************************************************
*
*       SSH memory architecture
*/
void     SSH_MEM_Add                              (void *pStore, unsigned NumBytesStore);
void     SSH_MEM_ConfigSystem                     (void);
void     SSH_MEM_SetContext                       (SEGGER_MEM_CONTEXT *pMem);
void     SSH_MEM_GetContext                       (SEGGER_MEM_CONTEXT **ppMem);

/*********************************************************************
*
*       Utility functions
*/
unsigned SSH_StrLen                               (const char *sText);

/*********************************************************************
*
*       Low-level log and warning output functions
*/
void     SSH_Log                                  (const char *sText);
void     SSH_Warn                                 (const char *sText);
void     SSH_Panic                                (int Status);  //lint -sem(SSH_Panic, r_no)

/*********************************************************************
*
*       Version and copyright information
*/
const char * SSH_GetVersionText                   (void);
const char * SSH_GetCopyrightText                 (void);

/*********************************************************************
*
*       OS integration
*/
void         SSH_OS_Init                          (void);
void         SSH_OS_Exit                          (void);
void         SSH_OS_Lock                          (void);
void         SSH_OS_Unlock                        (void);
U32          SSH_OS_GetTime32                     (void);
const char * SSH_OS_GetTaskName                   (void *pTask);
void         SSH_OS_DisableInterrupt              (void);
void         SSH_OS_EnableInterrupt               (void);

/*********************************************************************
*
*       Lint configuration
*
**********************************************************************
*/

//lint -esym(534,SSH_AddLogFilter)      suppress ignored return value
//lint -esym(534,SSH_RemoveLogFilter)   ditto
//lint -esym(534,SSH_SetLogFilter)      ditto
//lint -esym(534,SSH_AddWarnFilter)     ditto
//lint -esym(534,SSH_RemoveWarnFilter)  ditto
//lint -esym(534,SSH_SetWarnFilter)     ditto

#ifdef __cplusplus
}
#endif

#endif

/*************************** End of file ****************************/
